#### Contents of the preconfiguration file (for jessie)
### Localization
# Preseeding only locale sets language, country and locale.
d-i debian-installer/locale string en_US
d-i debian-installer/language string en
#d-i debian-installer/country string NL
d-i debian-installer/locale string en_US.UTF-8
#d-i localechooser/supported-locales multiselect en_US.UTF-8, nl_NL.UTF-8

# Keyboard selection.
d-i keyboard-configuration/xkb-keymap select us

### Network configuration
# Disable network configuration entirely. This is useful for cdrom
# installations on non-networked devices where the network questions,
# warning and long timeouts are a nuisance.
#d-i netcfg/enable boolean false

# netcfg will choose an interface that has link if possible. This makes it
# skip displaying a list if there is more than one interface.
d-i netcfg/choose_interface select auto

# Any hostname and domain names assigned from dhcp take precedence over
# values set here. However, setting the values still prevents the questions
# from being shown, even if values come from dhcp.
<% if (typeof hostname !== 'undefined') { %>
d-i netcfg/get_hostname string <%=hostname%>
<% } %>
<% if (typeof domain !== 'undefined') { %>
d-i netcfg/get_domain string <%=domain%>
<% } %>

# Disable that annoying WEP key dialog.
d-i netcfg/wireless_wep string

# If non-free firmware is needed for the network or other hardware, you can
# configure the installer to always try to load it, without prompting. Or
# change to false to disable asking.
#d-i hw-detect/load_firmware boolean true

### Mirror settings
# If you select ftp, the mirror/country string does not need to be set.
#d-i mirror/protocol string ftp
d-i mirror/country string manual
<% var repoHostname = repo.match(/^(https?:\/\/)?([a-zA-Z0-9\.:-]+)/)[2] -%>
d-i mirror/http/hostname string <%=repoHostname%>
<% var repoDirectory = repo.replace(/^(https?:\/\/)?([a-zA-Z0-9\.:-]+)/g,"") -%>
d-i mirror/http/directory string <%=repoDirectory%>
d-i preseed/early_command string \
<%_ if( typeof progressMilestones !== 'undefined' && progressMilestones.preConfigUri ) { _%>
wget 'http://<%=server%>:<%=port%><%-progressMilestones.preConfigUri%>' || true; \
<%_ } _%>
umount /media || true;
### Clock and time zone setup
# Controls whether or not the hardware clock is set to UTC.
d-i clock-setup/utc boolean true
# You may set this to any valid setting for $TZ; see the contents of
# /usr/share/zoneinfo/ for valid values.
<% if (typeof timezone !== 'undefined') { %>
d-i time/zone string <%=timezone%>
<% } %>
# Controls whether to use NTP to set the clock during the install
<% if (typeof ntp !== 'undefined') { %>
d-i clock-setup/ntp boolean true
# NTP server to use. The default is almost always fine here.
d-i clock-setup/ntp-server string <%=ntp%>
<% } %>

### Partitioning
d-i partman/early_command string \
<%_ if( typeof progressMilestones !== 'undefined' && progressMilestones.startPartitionUri ) { _%>
wget 'http://<%=server%>:<%=port%><%-progressMilestones.startPartitionUri%>' || true;
<%_ } _%>

d-i partman-auto/disk string <%=installDisk%>
d-i partman-auto/method string lvm
d-i partman-lvm/device_remove_lvm boolean true
d-i partman-lvm/device_remove_lvm_span boolean true
d-i partman-md/device_remove_md boolean true
d-i partman-auto/purge_lvm_from_device boolean true
d-i partman-auto-lvm/new_vg_name string debian
d-i partman-lvm/confirm boolean true
d-i partman/alignment string "optimal"
d-i partman-auto-lvm/guided_size string max
<% if (typeof installPartitions === 'undefined' || installPartitions.length < 2) { %>
d-i partman-auto/choose_recipe select atomic
<% } else {   %>
d-i partman-auto/expert_recipe string boot-root :: 1 1 1 free $iflabel{ gpt } $reusemethod{ } method{ biosgrub } . <% installPartitions.forEach(function(partition,idx) { %><% if(partition.mountPoint === '/boot') { %> 256 512 <%=partition.size%> <%=partition.fsType%> $defaultignore{ } $bootable{ } method{ format } format{ } use_filesystem{ } filesystem{ <%=partition.fsType%> } mountpoint{ <%=partition.mountPoint%> } . <% } else  if(partition.mountPoint === 'swap') { %><%=partition.size%> 512 200% linux-swap $reusemethod{ } method{ swap } format{ }  $lvmok{ } . <% } else { %> <% if (partition.size === "auto") { %> 2000 10000 -1 <%=partition.fsType%> $lvmok{ } method{ format } format{ } use_filesystem{ } filesystem{ <%=partition.fsType%> } mountpoint{ <%=partition.mountPoint%> } . <% } else { %> <%=partition.size%> 512 <%=partition.size%> <%=partition.fsType%> $lvmok{ } method{ format } format{ } use_filesystem{ } filesystem{ <%=partition.fsType%> } mountpoint{ <%=partition.mountPoint%> } . <% } %> <% }}) %> 
<% } %>

d-i partman-lvm/confirm_nooverwrite boolean true
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select finish
d-i partman/confirm boolean true
d-i partman/confirm_nooverwrite boolean true

### Account Setup 
d-i passwd/root-login boolean true
d-i passwd/make-user boolean false
d-i passwd/root-password-crypted password <%=rootEncryptedPassword%>

### Package selection
tasksel tasksel/first multiselect standard, ssh-server
<% var pkgs = ((typeof kvm === 'undefined' || !kvm) ? '' : 'qemu-kvm virt-manager libvirt0 python-libvirt bridge-utils') -%>
# Minimum packages (see postinstall.sh)
d-i pkgsel/include string openssh-server wget curl ssl-cert vlan
d-i pkgsel/upgrade select safe-upgrade
d-i pkgsel/update-policy select none
d-i pkgsel/language-packs multiselect en
d-i pkgsel/install-language-support boolean false
d-i pkgsel/update-policy select none

### Boot loader installation
# Grub is the default boot loader (for x86). If you want lilo installed
# instead, uncomment this:
#d-i grub-installer/skip boolean true
# To also skip installing lilo, and install no bootloader, uncomment this
d-i grub-installer/only_debian boolean true
d-i grub-installer/with_other_os boolean true
d-i grub-installer/bootdev string <%=installDisk%>

### Finishing up the installation
# During installations from serial console, the regular virtual consoles
# (VT1-VT6) are normally disabled in /etc/inittab. Uncomment the next
# line to prevent this.
#d-i finish-install/keep-consoles boolean true

# Avoid that last message about the install being complete.
d-i finish-install/reboot_in_progress note

#### Advanced options
### Running custom commands during the installation
# d-i preseeding is inherently not secure. Nothing in the installer checks
# for attempts at buffer overflows or other exploits of the values of a
# preconfiguration file like this one. Only use preconfiguration files from
# trusted locations! To drive that home, and because it's generally useful,
# here's a way to run any shell command you'd like inside the installer,
# automatically.

# This first command is run as early as possible, just after
# preseeding is read.
#d-i preseed/early_command string anna-install some-udeb
# This command is run immediately before the partitioner starts. It may be
# useful to apply dynamic partitioner preseeding that depends on the state
# of the disks (which may not be visible when preseed/early_command runs).
#d-i partman/early_command \
#       string debconf-set partman-auto/disk "$(list-devices disk | head -n1)"
# This command is run just before the install finishes, but when there is
# still a usable /target directory. You can chroot to /target and use it
# directly, or use the apt-install and in-target commands to easily install
# packages and run commands in the target system.
#d-i preseed/late_command string apt-install zsh; in-target chsh -s /bin/zsh

d-i preseed/late_command string \
<%_ if( typeof progressMilestones !== 'undefined' && progressMilestones.postConfigUri ) { _%>
in-target curl -X POST -H 'Content-Type:application/json' 'http://<%=server%>:<%=port%><%-progressMilestones.postConfigUri%>' || true; \
<%_ } _%>

#enable root ssh
in-target sed -i 's/PermitRootLogin.*/PermitRootLogin yes/g' /etc/ssh/sshd_config; \

#Enable Network standards that supports VLANs
#Load the 8021q module into the kernel
in-target modprobe 8021q; \
in-target su -c 'echo "8021q" >> /etc/modules'; \

#config vlan
<%_ if (typeof networkDevices !== 'undefined' && networkDevices.length > 0) { _%>
<%_ networkDevices.forEach(function(n) { _%>
    <%_ for (p in n) { _%>
        <%_ ip = n[p]; _%>
        <%_ if (['ipv4','ipv6'].indexOf(p) === -1 || undefined == ip) continue; _%>
        <%_ if (undefined !== ip.vlanIds) { _%>
            <%_ ip.vlanIds.forEach(function(vid) { _%>
in-target vconfig add ip.device <%=vid%>;
            <%_ }); _%>
        <%_ } _%>
    <%_ } _%>
<%_ }); _%>
in-target wget http://<%=server%>:<%=port%>/api/current/templates/debian-interfaces?nodeId=<%=nodeId%> -O /etc/network/interfaces; \
<%_ } _%>
in-target wget http://<%=server%>:<%=port%>/api/current/templates/post-install-debian.sh?nodeId=<%=nodeId%> -O ./post-install.sh; \
in-target chmod +x ./post-install.sh; \
in-target ./post-install.sh; \
in-target wget http://<%=server%>:<%=port%>/api/current/templates/debian-sources?nodeId=<%=nodeId%> -O /etc/apt/sources.list; \
in-target wget http://<%=server%>:<%=port%>/api/current/templates/<%=rackhdCallbackScript%>?nodeId=<%=nodeId%> -O /etc/rc2.d/S99callback; \
in-target chmod +x /etc/rc2.d/S99callback; \
in-target curl -X POST -H 'Content-Type:application/json' http://<%=server%>:<%=port%>/api/current/notification?nodeId=<%=nodeId%>
